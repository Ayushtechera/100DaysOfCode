package AccessModifier;

public class ObjectDemo {
    int num;
    float cgpa;

    public ObjectDemo(int num, float cgpa){
        this.num = num;
        this.cgpa = cgpa;
    }

    // Allready covered these 2 things
    @Override
    // Tostring basically gives the string representation
    public String toString() {
        return super.toString();
    }
    @Override
    // Finalize basically gets called when garbage collection hits
    protected void finalize() throws Throwable {
        super.finalize();
    }


    // More details of hashcode in hashmap vid
    // It is basically a number representation of the object or 
    // A unique representation of the object via some number generated by some algorithm
    @Override
    public int hashCode() {
        return num;
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }


    // It compares the object value, but "==" checks whether the both reference variable pointing to the same object or not.
    @Override
    public boolean equals(Object obj) {
        return this.num == ((ObjectDemo)obj).num; // since obj used in .equal method is of type Object class and we have typecasted it in ObjectDemo class.
    }

    public static void main(String[] args) {
        ObjectDemo obj = new ObjectDemo(65,8.4f);
        ObjectDemo obj2 = new ObjectDemo(65,9.5f);

        if (obj == obj2){ // Again "==" checks whether both the reference are pointing towards same object or not.
            System.out.println("obj is equal X to obj2");
        }

        if (obj.equals(obj2)){ //It is comparing the actual object value now there are two values in the pbject 1st is num and 2nd is cgpa so, it comparing only the value which is specify in the .equals to method above
            System.out.println("obj is equal to obj2");
        }
        

        System.out.println(obj.getClass().getTypeName());// it is used to get data or information about the class 

        // System.out.println(obj.hashCode());// it will print the hashcode value of the object
        // System.out.println(obj2.hashCode()); 

}
} 